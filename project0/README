NAME: Xilai Zhang
EMAIL: xilaizhang@g.ucla.edu
ID: 804796478

Here are the sources I used:
https://stackoverflow.com/questions/23489934/echo-2-some-text-what-does-it-mean-in-shell-scripting
https://stackoverflow.com/questions/11755312/redirecting-stdout-and-stderr-inside-a-makefile-rule
>& I used these to understand redirection in the functions.sh of which the P0_check.sh calls upon
https://www.gnu.org/software/libc/manual/html_node/Using-Getopt.html#Using-Getopt
I used this to study getopt
I studied signal chapter from the CS33 textbook
https://www.gnu.org/software/libc/manual/html_node/Getopt-Long-Options.html
https://www.gnu.org/software/libc/manual/html_node/Getopt-Long-Option-Example.html
https://www.gnu.org/software/libc/manual/html_node/Getopt-Long-Option-Example.html
I used these to study getopt long
http://man7.org/linux/man-pages/man2/dup.2.html
to study dup
http://www.comptechdoc.org/os/linux/programming/linux_pgsignals.html
linux signals
https://www.gnu.org/software/emacs/manual/html_node/emacs/Scrolling.html
emacs scrolling
http://man7.org/linux/man-pages/man2/open.2.html
open
https://stackoverflow.com/questions/39002052/how-i-can-print-to-stderr-in-c/39002243
https://www.tutorialspoint.com/c_standard_library/c_function_strerror.htm
http://man7.org/linux/man-pages/man3/strerror.3.html
print to stderr
https://help.unc.edu/help/how-to-use-unix-and-linux-file-permissions/
read write permissions
https://linux.die.net/man/2/creat
creat
http://man7.org/linux/man-pages/man2/read.2.html
read
http://man7.org/linux/man-pages/man2/write.2.html
write
https://web.cs.ucla.edu/classes/spring18/cs111/projects/fd_juggling.html
some nice examples provided by Professor Kampe
https://www.cprogramming.com/debugging/segfaults.html
backtrace and nullpointer
https://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html
bash script manual
https://stackoverflow.com/questions/2990414/echo-that-outputs-to-stderr
echo output to stderr
https://en.wikipedia.org/wiki/Exit_status#Shell_and_scripts
exit status
http://mywiki.wooledge.org/BashFAQ/031
double bracket conditional test
https://stackoverflow.com/questions/3148492/suppress-messages-in-make-clean-makefile-silent-remove
suppress message
https://superuser.com/questions/335396/what-is-the-difference-between-and-in-bash
redirection of &>
https://unix.stackexchange.com/questions/134018/does-linux-allow-executing-the-rm-rf-command
-f option
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=200987
the emacs bug, can't believe it !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
https://stackoverflow.com/questions/10121182/multiline-bash-commands-in-makefile
multiline bash script in makefile
https://unix.stackexchange.com/questions/133972/bash-syntax-error-when-else-follows-an-empty-then-clause
fill in empty conditional test
http://mywiki.wooledge.org/BashFAQ/031
https://serverfault.com/questions/52034/what-is-the-difference-between-double-and-single-square-brackets-in-bash
good explanation of double brackets
https://stackoverflow.com/questions/20121805/shell-conditional-in-makefile
numerical comparison

about included files:
      lab0.c: the source file, take options such as --input --output --segfault --catch
      makefile: make check runs a smoke-test. make dist is compress the files for grading. make clean remove redundant files.
      make check tests:
      	   code2test checks if input file cannot be opened.
	   code3test checks if the program exit properly when outfile cannot be written.
	   code4test checks if the program catches the signal of segfault.
	   code1test checks if the program handles and exit when supplied with bad arguments.
	   code0test checks the exit code when copy is successful.
	   finaltest checks if input file content matches the output file content.
      backtrace.png: run the program with --segfault option and use gdb backtrace to examine the stack. File type is screenshot.
      breakpoint.png: set a breakpoint right before dereferencing null pointer.use gdb to verify that it is indeed a null pointer.

I also put some notes in the Makefile.

